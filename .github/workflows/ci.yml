# SPDX-License-Identifier: Apache-2.0

name: CI
permissions:
  contents: read
on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
    types: [ "opened", "synchronize" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    strategy:
      fail-fast: false
      matrix:
        system: [ubuntu-latest, pqcp-arm64]
    name: Linting
    runs-on: ${{ matrix.system }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: ./.github/actions/lint
        with:
          nix-shell: ci-linter
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          cross-prefix: "aarch64-unknown-linux-gnu-"
  lint-markdown-link:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - uses: gaurav-nelson/github-action-markdown-link-check@1b916f2cf6c36510a6059943104e3c42ce6c16bc # v1.0.16
  quickcheck:
    strategy:
      fail-fast: false
      matrix:
        external:
         - ${{ github.repository_owner != 'pq-code-package' }}
        target:
         - runner: pqcp-arm64
           name: 'aarch64'
         - runner: ubuntu-latest
           name: 'x86_64'
         - runner: macos-latest
           name: 'macos (aarch64)'
         - runner: macos-13
           name: 'macos (x86_64)'
    name: Quickcheck (${{ matrix.target.name }})
    runs-on: ${{ matrix.target.runner }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: make quickcheck
        run: |
          make quickcheck
  quickcheck_bench:
    strategy:
      fail-fast: false
      matrix:
        external:
         - ${{ github.repository_owner != 'pq-code-package' }}
        target:
         - runner: pqcp-arm64
           name: 'aarch64'
         - runner: pqcp-arm64
           name: 'aarch64'
         - runner: ubuntu-latest
           name: 'x86_64'
         - runner: macos-latest
           name: 'macos (aarch64)'
         - runner: macos-13
           name: 'macos (x86_64)'
        exclude:
          - {external: true,
             target: {
               runner: pqcp-arm64,
               name: 'aarch64'
             }}
    name: Quickcheck bench (${{ matrix.target.name }})
    runs-on: ${{ matrix.target.runner }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: "tests bench (cycles: NO)"
        run: |
          ./scripts/tests bench -c NO
      - name: "tests bench (build only, cycles: PMU)"
        if: ${{ matrix.target.name != 'macos (aarch64)' && matrix.target.name != 'macos (x86_64)' }}
        run: |
          make clean
          ./scripts/tests bench -c PMU --no-run
      - name: "tests bench (build only, cycles: PERF)"
        if: ${{ matrix.target.name != 'macos (aarch64)' && matrix.target.name != 'macos (x86_64)' }}
        run: |
          make clean
          ./scripts/tests bench -c PERF --no-run
      - name: "tests bench (build only, cycles: MAC)"
        if: ${{ matrix.target.name == 'macos (aarch64)' || matrix.target.name == 'macos (x86_64)' }}
        run: |
          make clean
          ./scripts/tests bench -c MAC --no-run
      - name: tests bench components
        run: |
          make clean
          ./scripts/tests bench --components -c NO
  quickcheck-c90:
    strategy:
      fail-fast: false
      matrix:
        external:
         - ${{ github.repository_owner != 'pq-code-package' }}
        target:
         - runner: pqcp-arm64
           name: 'aarch64'
         - runner: ubuntu-latest
           name: 'x86_64'
        exclude:
          - {external: true,
             target: {
               runner: pqcp-arm64,
               name: 'aarch64'
             }}
    name: Quickcheck C90 (${{ matrix.target.name }})
    runs-on: ${{ matrix.target.runner }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: make quickcheck
        run: |
          OPT=0 CFLAGS=-std=c90 make quickcheck
          make clean >/dev/null
          OPT=1 CFLAGS=-std=c90 make quickcheck
      - uses: ./.github/actions/setup-apt
      - name: tests func
        run: |
          ./scripts/tests func --cflags="-std=c90"
      - name: tests bench
        run: |
          ./scripts/tests bench -c NO --cflags="-std=c90"
      - name: tests bench components
        run: |
          ./scripts/tests bench --components -c NO --cflags="-std=c90"
  compiler_tests:
    needs: [quickcheck, quickcheck_bench, quickcheck-c90, lint]
    name: Compiler tests  (${{ matrix.compiler.name }}, ${{ matrix.target.name }})
    strategy:
      fail-fast: false
      matrix:
        target:
         - runner: pqcp-arm64
           name: 'aarch64'
         - runner: ubuntu-latest
           name: 'x86_64'
         - runner: macos-latest
           name: 'macos'
        compiler:
         - name: gcc-4.8
           shell: ci_gcc48
           darwin: False
           c17: False
           c23: False
         - name: gcc-4.9
           shell: ci_gcc49
           darwin: False
           c17: False
           c23: False
         - name: gcc-7
           shell: ci_gcc7
           darwin: False
           c17: False
           c23: False
         - name: gcc-11
           shell: ci_gcc11
           darwin: True
           c17: True
           c23: False
         - name: gcc-13
           shell: ci_gcc13
           darwin: True
           c17: True
           c23: False
         - name: gcc-14
           shell: ci_gcc14
           darwin: True
           c17: True
           c23: True
         - name: clang-18
           shell: ci_clang18
           darwin: True
           c17: True
           c23: True
         - name: clang-19
           shell: ci_clang19
           darwin: True
           c17: True
           c23: True
    runs-on: ${{ matrix.target.runner }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: native build+functest (default)
        if: ${{ matrix.compiler.darwin || matrix.target.runner != 'macos-latest' }}
        uses: ./.github/actions/multi-functest
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          compile_mode: native
          func: true
          nistkat: false
          kat: false
          acvp: false
          nix-shell: ${{ matrix.compiler.shell }}
      - name: native build+functest (C90)
        if: ${{ matrix.compiler.darwin || matrix.target.runner != 'macos-latest' }}
        uses: ./.github/actions/multi-functest
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          compile_mode: native
          func: true
          nistkat: false
          kat: false
          acvp: false
          nix-shell: ${{ matrix.compiler.shell }}
          cflags: "-std=c90"
      - name: native build+functest (C99)
        if: ${{ matrix.compiler.darwin || matrix.target.runner != 'macos-latest' }}
        uses: ./.github/actions/multi-functest
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          compile_mode: native
          func: true
          nistkat: false
          kat: false
          acvp: false
          nix-shell: ${{ matrix.compiler.shell }}
          cflags: "-std=c99"
      - name: native build+functest (C11)
        if: ${{ matrix.compiler.darwin || matrix.target.runner != 'macos-latest' }}
        uses: ./.github/actions/multi-functest
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          compile_mode: native
          func: true
          nistkat: false
          kat: false
          acvp: false
          nix-shell: ${{ matrix.compiler.shell }}
          cflags: "-std=c11"
      - name: native build+functest (C17)
        if: ${{ (matrix.compiler.darwin || matrix.target.runner != 'macos-latest') &&
                matrix.compiler.c23 }}
        uses: ./.github/actions/multi-functest
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          compile_mode: native
          func: true
          nistkat: false
          kat: false
          acvp: false
          nix-shell: ${{ matrix.compiler.shell }}
          cflags: "-std=c17"
      - name: native build+functest (C23)
        if: ${{ (matrix.compiler.darwin || matrix.target.runner != 'macos-latest') &&
                matrix.compiler.c23 }}
        uses: ./.github/actions/multi-functest
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          compile_mode: native
          func: true
          nistkat: false
          kat: false
          acvp: false
          nix-shell: ${{ matrix.compiler.shell }}
          cflags: "-std=c23"
  cbmc_44:
    name: CBMC (ML-DSA-44)
    needs: [quickcheck, quickcheck_bench, quickcheck-c90, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: ./.github/actions/cbmc
        with:
          mldsa_mode: 2
          gh_token: ${{ secrets.GITHUB_TOKEN }}
  cbmc_65:
    name: CBMC (ML-DSA-65)
    needs: [quickcheck, quickcheck_bench, quickcheck-c90, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: ./.github/actions/cbmc
        with:
          mldsa_mode: 3
          gh_token: ${{ secrets.GITHUB_TOKEN }}
  cbmc_87:
    name: CBMC (ML-DSA-87)
    needs: [quickcheck, quickcheck_bench, quickcheck-c90, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: ./.github/actions/cbmc
        with:
          mldsa_mode: 5
          gh_token: ${{ secrets.GITHUB_TOKEN }}
