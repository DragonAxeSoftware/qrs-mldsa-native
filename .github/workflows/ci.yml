# Copyright (c) The mlkem-native project authors
# Copyright (c) The mldsa-native project authors
# SPDX-License-Identifier: Apache-2.0 OR ISC OR MIT

name: Extended
permissions:
  contents: read
on:
  workflow_call:
  workflow_dispatch:

jobs:
  build_kat:
    strategy:
      fail-fast: false
      matrix:
        external:
         - ${{ github.repository_owner != 'pq-code-package' }}
        target:
         - runner: macos-latest
           name: 'MacOS (aarch64)'
           arch: mac
           mode: native
         - runner: macos-13
           name: 'MacOS (x86_64)'
           arch: mac
           mode: native
         - runner: pqcp-arm64
           name: 'ubuntu-latest (aarch64)'
           arch: aarch64
           mode: native
         - runner: pqcp-arm64
           name: 'ubuntu-latest (aarch64)'
           arch: x86_64
           mode: cross-x86_64
         - runner: pqcp-arm64
           name: 'ubuntu-latest (aarch64)'
           arch: riscv64
           mode: cross-riscv64
         - runner: pqcp-arm64
           name: 'ubuntu-latest (aarch64)'
           arch: riscv32
           mode: cross-riscv32
         - runner: pqcp-arm64
           name: 'ubuntu-latest (ppc64le)'
           arch: ppc64le
           mode: cross-ppc64le
         - runner: pqcp-x64
           name: 'ubuntu-latest (x86_64)'
           arch: x86_64
           mode: native
         - runner: pqcp-x64
           name: 'ubuntu-latest (x86_64)'
           arch: aarch64
           mode: cross-aarch64
         - runner: pqcp-x64
           name: 'ubuntu-latest (x86_64)'
           arch: aarch64_be
           mode: cross-aarch64_be
        exclude:
          - {external: true,
             target: {
               runner: pqcp-arm64,
               name: 'ubuntu-latest (aarch64)',
               arch: aarch64,
               mode: native
             }}
          - {external: true,
             target: {
               runner: pqcp-arm64,
               name: 'ubuntu-latest (aarch64)',
               arch: x86_64,
               mode: cross-x86_64
             }}
          - {external: true,
             target: {
               runner: pqcp-arm64,
               name: 'ubuntu-latest (aarch64)',
               arch: riscv64,
               mode: cross-riscv64
             }}
          - {external: true,
             target: {
               runner: pqcp-arm64,
               name: 'ubuntu-latest (aarch64)',
               arch: riscv32,
               mode: cross-riscv32
             }}
          - {external: true,
             target: {
               runner: pqcp-arm64,
               name: 'ubuntu-latest (ppc64le)',
               arch: ppc64le,
               mode: cross-ppc64le
             }}
          - {external: true,
             target: {
               runner: pqcp-x64,
               name: 'ubuntu-latest (x86_64)',
               arch: x86_64,
               mode: native
             }}
          - {external: true,
             target: {
               runner: pqcp-x64,
               name: 'ubuntu-latest (x86_64)',
               arch: aarch64,
               mode: cross-aarch64
             }}
          - {external: true,
             target: {
               runner: pqcp-x64,
               name: 'ubuntu-latest (x86_64)',
               arch: aarch64_be,
               mode: cross-aarch64_be
             }}
    name: Functional tests (${{ matrix.target.arch }}${{ matrix.target.mode != 'native' && ', cross' || ''}})
    runs-on: ${{ matrix.target.runner }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: build + test
        uses: ./.github/actions/multi-functest
        with:
          nix-shell: ${{ matrix.target.mode == 'native' && 'ci' || 'ci-cross' }}
          nix-cache: ${{ matrix.target.mode == 'native' && 'false' || 'true' }}
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          compile_mode: ${{ matrix.target.mode }}
          # There is no native code yet on PPC64LE, R-V or AArch64_be, so no point running opt tests
          opt: ${{ (matrix.target.arch != 'ppc64le' && matrix.target.arch != 'riscv64' && matrix.target.arch != 'riscv32' && matrix.target.arch != 'aarch64_be') && 'all' || 'no_opt' }}
      - name: build + test (+debug+memsan+ubsan)
        uses: ./.github/actions/multi-functest
        if: ${{ matrix.target.mode == 'native' }}
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          compile_mode: native
          cflags: "-DMLDSA_DEBUG -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
  compiler_tests:
    name: Compiler tests  (${{ matrix.compiler.name }}, ${{ matrix.target.name }}, ${{ matrix.cflags }})
    strategy:
      fail-fast: false
      matrix:
        cflags: [ "-O0", "-Os", "-O3" ]
        target:
         - runner: pqcp-arm64
           name: 'aarch64'
         - runner: ubuntu-latest
           name: 'x86_64'
         - runner: macos-latest
           name: 'macos'
        compiler:
         - name: gcc-4.8
           shell: ci_gcc48
           darwin: False
           c17: False
           c23: False
           opt: all
           examples: False
         - name: gcc-4.9
           shell: ci_gcc49
           darwin: False
           c17: False
           c23: False
           opt: all
           examples: False
         - name: gcc-7
           shell: ci_gcc7
           darwin: False
           c17: False
           c23: False
           opt: all
           examples: False
         - name: gcc-11
           shell: ci_gcc11
           darwin: True
           c17: True
           c23: False
           opt: all
           examples: False
         - name: gcc-13
           shell: ci_gcc13
           darwin: True
           c17: True
           c23: False
           opt: all
           examples: False
         - name: gcc-14
           shell: ci_gcc14
           darwin: True
           c17: True
           c23: True
           opt: all
           examples: False
         - name: clang-18
           shell: ci_clang18
           darwin: True
           c17: True
           c23: True
           opt: all
           examples: False
         - name: clang-19
           shell: ci_clang19
           darwin: True
           c17: True
           c23: True
           opt: all
           examples: False
         - name: clang-20
           shell: ci_clang20
           darwin: True
           c17: True
           c23: True
           opt: all
           examples: False
         # CPU flags are not correctly passed to the zig assembler
         # https://github.com/ziglang/zig/issues/23576
         # We therefore only test the C backend
         #
         # We omit all examples since there is currently no way to run
         # only those examples not involving native code.
         - name: zig-0.12
           shell: ci_zig0_12
           darwin: True
           c17: True
           c23: False
           examples: False
           opt: no_opt
         - name: zig-0.13
           shell: ci_zig0_13
           darwin: True
           c17: True
           c23: False
           examples: False
           opt: no_opt
         - name: zig-0.14
           shell: ci_zig0_14
           darwin: True
           c17: True
           c23: True
           examples: False
           opt: no_opt
    runs-on: ${{ matrix.target.runner }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: native build+functest (default)
        if: ${{ matrix.compiler.darwin || matrix.target.runner != 'macos-latest' }}
        uses: ./.github/actions/multi-functest
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          compile_mode: native
          func: true
          kat: false
          acvp: false
          examples: ${{ matrix.compiler.examples }}
          opt: ${{ matrix.compiler.opt }}
          nix-shell: ${{ matrix.compiler.shell }}
          cflags: "${{ matrix.cflags }}"
      - name: native build+functest (C90)
        if: ${{ matrix.compiler.darwin || matrix.target.runner != 'macos-latest' }}
        uses: ./.github/actions/multi-functest
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          compile_mode: native
          func: true
          kat: false
          acvp: false
          examples: ${{ matrix.compiler.examples }}
          opt: ${{ matrix.compiler.opt }}
          nix-shell: ${{ matrix.compiler.shell }}
          cflags: "-std=c90 ${{ matrix.cflags }}"
      - name: native build+functest (C99)
        if: ${{ matrix.compiler.darwin || matrix.target.runner != 'macos-latest' }}
        uses: ./.github/actions/multi-functest
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          compile_mode: native
          func: true
          kat: false
          acvp: false
          examples: ${{ matrix.compiler.examples }}
          opt: ${{ matrix.compiler.opt }}
          nix-shell: ${{ matrix.compiler.shell }}
          cflags: "-std=c99 ${{ matrix.cflags }}"
      - name: native build+functest (C11)
        if: ${{ matrix.compiler.darwin || matrix.target.runner != 'macos-latest' }}
        uses: ./.github/actions/multi-functest
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          compile_mode: native
          func: true
          kat: false
          acvp: false
          examples: ${{ matrix.compiler.examples }}
          opt: ${{ matrix.compiler.opt }}
          nix-shell: ${{ matrix.compiler.shell }}
          cflags: "-std=c11 ${{ matrix.cflags }}"
      - name: native build+functest (C17)
        if: ${{ (matrix.compiler.darwin || matrix.target.runner != 'macos-latest') &&
                matrix.compiler.c17 }}
        uses: ./.github/actions/multi-functest
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          compile_mode: native
          func: true
          kat: false
          acvp: false
          examples: ${{ matrix.compiler.examples }}
          opt: ${{ matrix.compiler.opt }}
          nix-shell: ${{ matrix.compiler.shell }}
          cflags: "-std=c17 ${{ matrix.cflags }}"
      - name: native build+functest (C23)
        if: ${{ (matrix.compiler.darwin || matrix.target.runner != 'macos-latest') &&
                matrix.compiler.c23 }}
        uses: ./.github/actions/multi-functest
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          compile_mode: native
          func: true
          kat: false
          acvp: false
          examples: ${{ matrix.compiler.examples }}
          opt: ${{ matrix.compiler.opt }}
          nix-shell: ${{ matrix.compiler.shell }}
          cflags: "-std=c23 ${{ matrix.cflags }}"

  check_autogenerated_files:
    strategy:
      fail-fast: false
      matrix:
        system: [ubuntu-latest, pqcp-arm64]
    runs-on: ${{ matrix.system }}
    name: Check autogenerated files
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: ./.github/actions/setup-shell
        with:
          nix-shell: 'ci'
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            python3 ./scripts/autogen --dry-run
